networks:
  jaeger:
    name: "jaeger_net"
  db:
    name: "db_net"

services:
  jaeger:
    user: root
    privileged: true
    #image: jaegertracing/all-in-one:1.62.0
    image: jaegertracing/jaeger:2.5.0
    networks:
      - jaeger
    restart: always
    command:
      #- "--badger.span-store-ttl=72h0m0s"
      - "--config=/cmd/jaeger/config.yaml"
    #environment:
      #- COLLECTOR_OTLP_ENABLED=true
      #- LOG_ENCODING=console
      #- LOG_LEVEL=info
      #- COLLECTOR_ZIPKIN_HOST_PORT=:9411
      #- OTEL_TRACES_SAMPLER=always_off
      #- SPAN_STORAGE_TYPE=badger
      #- BADGER_EPHEMERAL=false
      #- BADGER_DIRECTORY_VALUE=/badger/data
      #- BADGER_DIRECTORY_KEY=/badger/key
    ports:
      - "5775:5775/udp"
      - "6831-6832:6831-6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "4317-4318:4317-4318"
      - "9411:9411"
      - "13133:13133"
      - "12133:12133"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      #- jaeger_badger_data:/badger
      - ./jaeger/config/config.yaml:/cmd/jaeger/config.yaml
      - ./jaeger/data/now:/cmd/jaeger/data/now
      - ./jaeger/data/archive:/cmd/jaeger/data/archive
      - ./jaeger/config/config-ui.json:/cmd/jaeger/config-ui.json
      - ./jaeger/config/sampling-strategies.json:/cmd/jaeger/sampling-strategies.json
    container_name: jaeger
    healthcheck:
      timeout: 5s
      retries: 5
      interval: 60s
      test: ["CMD","wget","-O","-","-q","http://127.0.0.1:14269/health"]

  tracgen:
    image: jaegertracing/jaeger-tracegen:latest
    networks:
      - jaeger
    environment:
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=jaeger:4318
    command: [ "-duration", "10s", "-workers", "3", "-pause", "250ms" ]
    depends_on:
      - jaeger

  anonymizer:
    image: jaegertracing/jaeger-anonymizer:2.5.0
    networks:
      - jaeger
    #environment:
      #- OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./anonymizer:/anonymizer
    command:
      - "--trace-id <TraceId>"
      - "--query-host-port JAEGER_QUERY_HOST_PORT"

  remote-storage:
    image: jaegertracing/jaeger-remote-storage:2.5.0
    command:
      - "--log-level=debug"
    environment:
      - SPAN_STORAGE_TYPE=memory
    ports:
      - "17271:17271"
    networks:
      - jaeger

  opensearch1:
    image: opensearchproject/opensearch:1.3.17
    networks:
      - db
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
    ports:
      - "9200:9200"

  opensearch2:
    image: opensearchproject/opensearch:2.19.0
    networks:
      - db
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=passRT%^#234
    ports:
      - "9200:9200"

  cassandra4:
    image: cassandra:4.1
    container_name: "cassandra-4"
    ports:
      - "9042:9042"
      - "9160:9160"
    # We enable password authentication that defaults to cassandra/cassandra superuser / pwd.
    # https://cassandra.apache.org/doc/stable/cassandra/operating/security.html#authentication
    command: >
      /bin/sh -c "echo 'authenticator: PasswordAuthenticator' >> /etc/cassandra/cassandra.yaml && docker-entrypoint.sh cassandra -f"
    networks:
      - db
    healthcheck:
      test: [ "CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "describe keyspaces" ]
      interval: 30s
      timeout: 10s
      retries: 5

  cassandra5:
    image: cassandra:5.0
    container_name: "cassandra-5"
    ports:
      - "9042:9042"
      - "9160:9160"
    # We enable password authentication that defaults to cassandra/cassandra superuser / pwd.
    # https://cassandra.apache.org/doc/stable/cassandra/operating/security.html#authentication
    command: >
      /bin/sh -c "echo 'authenticator: PasswordAuthenticator' >> /etc/cassandra/cassandra.yaml && docker-entrypoint.sh cassandra -f"
    networks:
      - db
    healthcheck:
      test: [ "CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "describe keyspaces" ]
      interval: 30s
      timeout: 10s
      retries: 5
